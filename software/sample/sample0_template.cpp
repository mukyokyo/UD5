/*!
 @file  sample0_template.cpp
 @brief ud5のコードのひな形
 @note
  ud5.hが提供するクラスや関数のベースを紹介。
  プログラムとしては意味を持たない。
 */

//-----------------------------------------------
// ud5.hはコードの最初にインクルードする記述が必須
// 以後の宣言に必要なクラスや関数が定義されているため
//-----------------------------------------------
#include <ud5.h>

//-----------------------------------------------
// 以下のクラスは必要に応じて実体化する事
// 動的に生成したり消去することはもとより複数生成される事も
// 想定しておらず、コードの頭で各々インスタンス化して使う前提
// そのため生成後の消去については一部を除き不完全のまま
//-----------------------------------------------

//! CRPiIFはラズパイとシリアル通信するクラス
// インスタンス化時にパラメータを端折る事ができない
// 今は無用の長物
CRPiIF rpi(115200, USIP_8N1, 10, 10);

//! CDXIFは3ピンコネクタを介した半二重シリアル通信クラス
// デバッグに必須
// 引数無しの場合はデフォルトで初期化
CDXIF dx;

//! CGPIOはマイコンのGPIOを扱うためのクラス
// 今は受信機のパルスの取り込みくらいしか使い道が無い
// 引数無しの場合はマイコンのGPIOを入力端子として初期化
CGPIO gpio;

//! CRCStickは先のCGPIOを使ったパルス取り込みを二次処理するクラス
// 引数としてインスタンス化したCGPIOが必要
CRCStick rcstick(&gpio);

//! CEXIOはSPIバスで接続された外部GPIOを扱うためのクラス
// LEDと単純な入出力のみ
// 引数無しの場合は外部GPIOを入力端子として初期化
CEXIO exio;

//! CMotorは2chのモータドライバをPWM駆動するためのクラス
// PWMのデューティーを与えるくらいしか機能は無い
// 引数無しの場合はデフォルトで初期化
CMotor motor;

//! CPCMはマイコンのDACを使って周期的なアナログ出力を行うためのクラス
// 予めサンプリングされたデータを音として再生するのが目的
// 引数としてサンプリングデータの一覧と音量が必要
CPCM audio(NULL, 32);

//! CI2CはI2Cを扱うためのクラス
// ArduinoのWireライクに使える
CI2C i2c(CI2C::IIC_Fm);

//! main関数
// 先のインスタンス化したクラスがmainよりも先に処理される
int main (void) {
  //-----------------------------------------------
  // 以下は定義済み関数
  // 必要に応じて使えば良し
  //-----------------------------------------------

  // ミリ秒単位の時間待ち
  UD5_WAIT (1000);

  // 起動直後からの経過時間をミリ秒で取得
  UD5_GET_ELAPSEDTIME ();

  // 強制的にブートローダへ戻る
  UD5_SOFTRESET ();

  // 割り込みが発生するまで低消費電力モードへ遷移
  // 割り込み要因はCGPIOのパルス取り込み・CDAC・FreeRTOSしか無いのであまり使い道は無い
  UD5_LOWPOWERMODE ();
}
