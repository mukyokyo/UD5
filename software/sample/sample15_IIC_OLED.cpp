/*!
 @file  sample15_IIC_OLED.cpp
 @brief I2C通信 I2C通信 OLED
 @note
  STEMMA QT/Qwiicコネクタを使用してOLED表示
  SSD1306 128x64 を想定
  表示器ということもあり機能が豊富なので長大
  無理矢理rand関数を使ってみているのでウォー
  ニングを大量に吐く
 @note
  コンパイルオプション->etcタブのGCC追加オプ
  ション指定に「ss_oled.cpp」を追記の事

 */
#include <ud5.h>
#include <stdio.h>

CDXIF dx;

CGPIO gpio;
CEXIO exio;

//! I2Cポートを初期化
CI2C Wire(CI2C::IIC_Fmp);

// OLED関連
#include  <ss_oled.h>

#define OLED_ADDR -1  //!< アドレスを自動検出
#define FLIP180   0
#define INVERT    0

COLED::SSOLED ssoled;
//! グラフィック描画用バッファ
uint8_t ucBackBuffer[1024];
COLED oled(&ssoled, &Wire, COLED::OLED_128x64, OLED_ADDR, FLIP180, INVERT, ucBackBuffer);

const uint8_t bAnimation[] = {
  0xe5,0x00,0x48,0x80,0xff,0x00,0xf9,0x00,0x40,0x0f,0xc0,0xe0,0xf0,0xfe,0xfe,0xff,
  0xfe,0xfc,0xf8,0xf0,0xf0,0xe0,0xe0,0xc0,0x80,0x80,0xff,0x00,0xea,0x00,0x58,0x04,
  0x0e,0x1e,0xc4,0x1f,0x50,0x3f,0x7f,0xcb,0xff,0x70,0xfe,0xf8,0xf0,0xc0,0x80,0x80,
  0xff,0x00,0xed,0x00,0x48,0x01,0xdf,0xff,0xc4,0xfe,0xc2,0xff,0xc3,0x7f,0xce,0xff,
  0x40,0x07,0x7f,0x7f,0x3f,0x3f,0x1f,0x0f,0x07,0x03,0xfd,0x00,0x50,0x03,0x07,0xcd,
  0xff,0xc6,0x7f,0xcf,0xff,0x50,0xfc,0xe0,0xc5,0x00,0xc7,0x01,0xff,0x00,0xc8,0x00,
  0x48,0xe0,0xc2,0xff,0x40,0x08,0x7f,0x1f,0x0f,0x03,0x00,0x00,0x01,0x0f,0x7f,0xc2,
  0xff,0xc6,0x00,0x50,0x07,0x3f,0xc3,0xff,0x40,0x10,0x1f,0x07,0x03,0x03,0x07,0x0f,
  0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0xfc,0xf8,0xf0,0xe0,0xff,0x00,0xcc,0x00,0x40,
  0x08,0x80,0x80,0xc0,0xf8,0xfe,0x7f,0x1f,0x07,0x01,0xc6,0x00,0xc1,0x80,0xc2,0xff,
  0xc4,0x00,0x40,0x07,0x80,0x80,0xc0,0xf0,0xff,0xff,0x3f,0x0f,0xcc,0x00,0x68,0x01,
  0x8f,0xff,0xff,0xf0,0xff,0x00,0xca,0x00,0x68,0x01,0x01,0x03,0x03,0x01,0xcb,0x00,
  0xc3,0x01,0xc5,0x00,0xc4,0x01,0xcf,0x00,0xc3,0x03,0x48,0x01,0xe8,0x00,0x00,0x25,
  0x48,0x00,0x00,0x79,0x4a,0x80,0x51,0xf8,0xff,0x4f,0xff,0x48,0xc0,0x00,0x6b,0x48,
  0x00,0x00,0x14,0x49,0xfc,0x48,0xe0,0x00,0x70,0x48,0x00,0x00,0x1e,0x4d,0xfe,0x5a,
  0xfe,0xfe,0xbe,0x95,0xff,0xc1,0xfe,0x00,0x07,0x40,0x08,0xff,0xff,0x7f,0x7f,0x3f,
  0x1f,0x0f,0x06,0x02,0x00,0x3c,0x49,0x01,0x48,0xcf,0x00,0x0b,0x48,0x7f,0x00,0x1c,
  0xc1,0x01,0x00,0x07,0x48,0x01,0x00,0x47,0x52,0x00,0xf0,0x54,0xff,0x3f,0x59,0x7f,
  0xff,0xff,0x57,0x03,0x00,0x5b,0x00,0x0f,0x7f,0x5b,0xff,0x0f,0x07,0x49,0x1f,0x4b,
  0x3f,0x68,0xfe,0xf8,0xe0,0xe0,0x00,0x00,0x4c,0x49,0x00,0x61,0x80,0xe0,0xf8,0xff,
  0x57,0x0f,0x03,0x51,0x1f,0xff,0x55,0xf8,0x00,0x40,0x09,0x00,0x00,0x80,0x80,0xe0,
  0xfd,0x7f,0x3f,0x0f,0x02,0x00,0x0a,0x52,0x03,0xff,0x48,0x00,0x00,0x4a,0x51,0x00,
  0x03,0x49,0x01,0x48,0x01,0x00,0x0d,0x4e,0x00,0x4c,0x00,0x48,0x01,0x00,0x0e,0x68,
  0x00,0x01,0x01,0x00,0x00,0x00,0x28,0x00,0xa1,0x4d,0xf0,0x49,0xfe,0x49,0xf8,0x49,
  0xf0,0x48,0xe0,0x00,0x6d,0x5c,0x06,0x0e,0x0f,0x58,0x1f,0x1f,0x3f,0x00,0x09,0x4a,
  0xfe,0x4a,0xf0,0x48,0x00,0x00,0x6e,0x48,0x1f,0x00,0x1c,0x4c,0xfe,0x4b,0xfc,0xc2,
  0x7e,0xc6,0xfe,0x10,0xc2,0xfe,0x20,0xc2,0xfe,0x70,0x7e,0x7e,0x3e,0x3e,0x1e,0x0e,
  0x00,0x3e,0x50,0x03,0x87,0x00,0x12,0x50,0x3f,0x7f,0x00,0x0e,0x53,0xf8,0x00,0x48,
  0x01,0x00,0x0a,0xc1,0x01,0x00,0x46,0x4b,0xe0,0x49,0x7f,0x49,0x01,0x91,0xff,0x58,
  0x3f,0x07,0x00,0x00,0x08,0x5b,0x03,0x1f,0x7f,0x79,0xff,0x0f,0x0f,0x1f,0x1f,0x3f,
  0x3f,0x78,0x7f,0x7f,0xfc,0xf0,0xe0,0x00,0x00,0x00,0x4e,0x49,0x00,0x7c,0x80,0xe0,
  0xfc,0xff,0x3f,0x0f,0x01,0x70,0x0f,0x3f,0xff,0xf0,0xe0,0x00,0x00,0x07,0x40,0x07,
  0x00,0x00,0x80,0xe0,0xff,0x7f,0x1f,0x07,0x00,0x09,0x68,0xff,0xff,0x7f,0x00,0x00,
  0x00,0x4c,0x53,0x00,0x01,0x48,0x01,0x00,0x09,0x48,0x00,0x00,0x09,0x70,0x00,0x03,
  0x03,0x03,0x03,0x01,0x00,0x0d,0x58,0x01,0x00,0x00,0x00,0x2a,0x00,0x26,0x48,0x80,
  0x00,0x79,0x4a,0xe0,0x4b,0xfc,0x49,0xfc,0x49,0xf8,0x49,0xf0,0x50,0xe0,0xc0,0x00,
  0x6b,0x4a,0x02,0x78,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x1f,0x00,0x09,0x70,0xff,0xfe,
  0xfc,0xf8,0xe0,0xc0,0x00,0x6f,0x48,0x0f,0x00,0x13,0xac,0xfe,0x4c,0xff,0x4b,0xfe,
  0x48,0x3e,0x00,0x0d,0xa3,0xfe,0x49,0xfe,0x4a,0x7e,0x50,0x1e,0x0c,0x00,0x3c,0x49,
  0x00,0x48,0x07,0x00,0x0a,0x4f,0x7f,0x48,0x7f,0x00,0x0e,0x93,0x00,0x4a,0x01,0xca,
  0x03,0x09,0x01,0x00,0x45,0x52,0x00,0xf8,0x62,0xff,0x1f,0x03,0xe1,0x58,0x7f,0x1f,
  0x03,0x00,0x0b,0x48,0x3f,0x00,0x07,0x4a,0x1f,0x68,0x7e,0xf8,0xf0,0xe0,0x00,0x00,
  0x53,0x73,0x80,0xe0,0xfe,0x7f,0x1f,0x07,0x70,0x1f,0xff,0xff,0xf0,0x00,0x00,0x00,
  0x0a,0x7f,0x00,0x80,0xc0,0xff,0xff,0x3f,0x06,0x51,0x7f,0xff,0xc1,0x00,0x00,0x4f,
  0x4c,0x00,0x48,0x01,0x00,0x07,0x60,0x01,0x01,0x00,0x00,0x00,0x08,0x52,0x00,0x01,
  0x58,0x03,0x03,0x01,0x00,0x0b,0x48,0x00,0x00,0x2c,0x00,0x25,0x50,0x80,0xc0,0x00,
  0x79,0x4d,0xf0,0x55,0xff,0xfe,0x49,0xc0,0x48,0x80,0x00,0x6b,0x4f,0x06,0x48,0x3f,
  0x00,0x0e,0x48,0x80,0x00,0x6f,0x48,0x01,0x00,0x12,0x4a,0xfe,0xc2,0xff,0x00,0x08,
  0x4b,0xfc,0x49,0x7e,0x4a,0xfe,0xd3,0xfc,0x58,0x7c,0x3c,0x1c,0x00,0x53,0x50,0x3f,
  0xff,0x00,0x11,0x49,0x01,0x91,0x03,0xc8,0x07,0x0c,0x03,0x03,0x01,0x01,0x00,0x44,
  0x4b,0xf0,0xc2,0xff,0x68,0x7f,0x1f,0x07,0x01,0x00,0x00,0x09,0x4e,0x07,0x40,0x0a,
  0xff,0x3f,0x3f,0x7f,0x7f,0xff,0xff,0xf0,0x60,0x00,0x00,0x00,0x52,0x4a,0x00,0x70,
  0xc0,0xf8,0xff,0xff,0x1f,0x1f,0xc2,0xff,0x58,0xc0,0x00,0x00,0x00,0x0d,0x59,0x00,
  0x80,0xc3,0x5b,0xff,0x7f,0x06,0x70,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x52,0x74,
  0x00,0x03,0x03,0x03,0x03,0x01,0x68,0x01,0x01,0x01,0x00,0x00,0x00,0x0b,0x53,0x00,
  0x02,0x96,0x03,0xc1,0x01,0x00,0x30,0x00,0x27,0x48,0x80,0x00,0x76,0x53,0x80,0xc0,
  0x4c,0xff,0x49,0xfc,0x4a,0xf8,0x48,0xe0,0x00,0x6c,0x5c,0x00,0x07,0x07,0x49,0x07,
  0x50,0x1f,0x3f,0x00,0x09,0x68,0xff,0xfe,0xfc,0xf0,0xc0,0x00,0x6f,0x50,0x00,0x7f,
  0x00,0x10,0x4b,0xfe,0x4f,0xfe,0x92,0xff,0x54,0xfe,0xfc,0x4a,0x7e,0xc3,0xfe,0x00,
  0x51,0x5f,0x01,0x03,0x07,0x9f,0x7f,0x49,0x3f,0x48,0x3f,0x00,0x0b,0x54,0x3f,0x07,
  0x49,0x00,0x91,0x01,0x9c,0x03,0xc1,0x03,0x00,0x48,0x49,0x80,0x4a,0xfe,0x78,0x7f,
  0x0f,0x07,0x03,0x01,0x00,0x00,0x00,0x0a,0x64,0x01,0x07,0x1f,0x7f,0xc3,0xff,0x48,
  0xe0,0xc2,0x00,0x00,0x55,0x49,0x00,0x52,0x80,0xe7,0x70,0xff,0xc7,0x00,0x00,0x00,
  0x00,0x00,0x10,0x59,0x00,0x81,0xc7,0xc2,0xff,0x68,0x1f,0x07,0x01,0x00,0x00,0x00,
  0x56,0x4a,0x01,0x4d,0x01,0xc2,0x00,0x00,0x0e,0x76,0x00,0x00,0x01,0x01,0x01,0x01,
  0xc1,0x00,0x00,0x30,0x00,0x27,0x48,0x00,0x00,0x79,0x4e,0xf8,0x4c,0xf8,0x48,0xc0,
  0x00,0x6c,0x4a,0x02,0x49,0x07,0x91,0x07,0x50,0x07,0x0f,0x00,0x0c,0x4a,0xf8,0x48,
  0x80,0x00,0x86,0xc1,0xfe,0x00,0x0b,0x57,0x7e,0x3e,0x48,0xfc,0x00,0x12,0x48,0x00,
  0x00,0x3f,0x4e,0xef,0x97,0x3f,0x93,0x3f,0x48,0x3f,0x00,0x0a,0x55,0x1f,0x00,0x4a,
  0x00,0x4b,0x01,0xa3,0x03,0xc1,0x01,0x00,0x44,0x62,0xf0,0xfc,0xff,0xff,0x68,0xff,
  0xff,0x1f,0x01,0x00,0x00,0x0c,0x7c,0x00,0x00,0x03,0x07,0x0f,0x1f,0x7f,0x50,0x80,
  0x00,0x00,0x59,0x5a,0x00,0x87,0xbf,0x58,0x7f,0x1f,0x07,0x00,0x14,0x5c,0x00,0xf0,
  0xfc,0xc1,0x00,0x00,0x58,0x5a,0x00,0x01,0x01,0x48,0x01,0x00,0x16,0x92,0x00,0xc1,
  0x01,0x00,0x36,0x00,0x24,0x49,0x80,0x48,0x80,0x00,0x7f,0x59,0xfe,0xfc,0xfc,0x49,
  0xf0,0x68,0xf0,0xe0,0xe0,0xc0,0x80,0x00,0x6c,0x49,0x0f,0x70,0x0f,0x0f,0x0f,0x0f,
  0x1f,0x7f,0x00,0x0a,0x50,0xff,0xfe,0x00,0x84,0xbe,0xff,0x4a,0xfe,0x49,0xfc,0x53,
  0xfc,0x3c,0x93,0x7e,0xce,0xfe,0x5a,0x7e,0x7e,0x3c,0x48,0x08,0x00,0x3d,0x58,0x81,
  0xc7,0xf7,0x00,0x0e,0x48,0x7f,0x00,0x0f,0x4f,0x7f,0xc2,0x00,0xc9,0x01,0x10,0xc1,
  0x00,0x00,0x40,0x7b,0xe0,0xf8,0x7e,0x3f,0x1f,0x07,0x87,0x50,0x7f,0x03,0x00,0x12,
  0x54,0x9f,0xff,0x48,0xff,0x00,0x59,0x40,0x09,0x3f,0x7f,0x00,0x00,0x80,0xe0,0xff,
  0xff,0x3f,0x0f,0x00,0x11,0x40,0x09,0x78,0x3c,0x1e,0x0f,0x87,0x81,0xc0,0xf9,0xff,
  0x0f,0x00,0x5a,0x93,0x00,0x48,0x01,0x00,0x17,0x4b,0x00,0x48,0x01,0x00,0x35,0x00,
  0x24,0x49,0x00,0x48,0x00,0x00,0x81,0x49,0xf8,0x49,0xf8,0x49,0xe0,0x58,0xc0,0x80,
  0x00,0x00,0x6b,0x4d,0x0f,0x58,0x1f,0x3f,0xff,0x00,0x0a,0x50,0xfc,0xf8,0x00,0x71,
  0x50,0x07,0xff,0x00,0x0f,0xc3,0xfe,0x00,0x07,0xc1,0xfe,0x00,0x0a,0x48,0xfe,0x00,
  0x10,0x49,0x7e,0x49,0x3e,0x58,0x1c,0x0c,0x00,0x00,0x3c,0x66,0x80,0xc3,0xf3,0xff,
  0x50,0xff,0x7f,0x00,0x17,0x50,0xff,0x08,0x00,0x08,0x4e,0x00,0xc4,0x00,0x00,0x40,
  0x79,0xc0,0xf0,0xfc,0x3f,0x3f,0x1f,0x0f,0x4b,0x07,0x58,0xff,0x3f,0x01,0x00,0x0e,
  0x61,0x07,0x8f,0xff,0xff,0x61,0x7f,0x3f,0x7f,0x7f,0x58,0xff,0xf0,0xc0,0x00,0x52,
  0x73,0x70,0x7e,0x7f,0x1f,0x01,0x00,0x51,0x80,0xc0,0x58,0xff,0x3f,0x07,0x00,0x0d,
  0x78,0x70,0x7c,0x3e,0x1f,0x0f,0x07,0x03,0xc2,0x00,0x70,0x80,0x80,0xff,0xff,0x7f,
  0x0f,0x00,0x59,0x52,0x00,0x03,0x48,0x01,0x00,0x17,0x78,0x00,0x00,0x00,0x03,0x01,
  0x01,0x01,0x00,0x32,0x00,0xa0,0x5d,0x80,0xe0,0xf0,0x4a,0xf8,0x4a,0xf0,0x58,0xc0,
  0x80,0x00,0x00,0x6a,0x55,0x06,0x0e,0x58,0x1f,0x3f,0x7f,0x00,0x0a,0x4a,0xfe,0x48,
  0xe0,0x00,0x70,0x48,0x1f,0x00,0x10,0xa7,0xff,0x4e,0xfe,0xc2,0xfe,0x00,0x18,0x58,
  0x1e,0x0e,0x04,0x00,0x3d,0x58,0x00,0x03,0xc7,0x00,0x07,0x48,0xff,0x00,0x07,0x4b,
  0x7f,0x48,0xff,0x00,0x0b,0x5d,0xff,0xfe,0xe0,0x9e,0x01,0xc1,0x01,0x00,0x43,0x40,
  0x0b,0x00,0x80,0xf0,0xf8,0xfe,0x7f,0x3f,0x1f,0x0f,0x07,0x03,0x7f,0x08,0xc2,0xff,
  0x00,0x0c,0x5b,0x07,0x1f,0xff,0x40,0x0b,0x07,0x0f,0x1f,0x3f,0x3f,0x7f,0x7f,0xff,
  0xff,0xf0,0xc0,0xc0,0x00,0x4e,0x72,0x80,0xe0,0xfc,0xff,0x3f,0x07,0xc2,0x00,0x78,
  0x80,0x80,0xe0,0xff,0xff,0x3f,0x0f,0x00,0x09,0x79,0xc0,0xe0,0xf0,0x7c,0x3f,0x1f,
  0x0f,0x4a,0x01,0xc3,0x00,0x70,0x80,0x80,0xc1,0xff,0xff,0x1f,0x00,0x56,0x99,0x00,
  0xc3,0x01,0x00,0x16,0xc3,0x00,0xc4,0x01,0x00,0x2d,0x00,0x9f,0x57,0x00,0xc0,0x68,
  0xfc,0xf0,0xf0,0xe0,0xe0,0x00,0x6d,0x58,0x04,0x0e,0x1e,0xc4,0x1f,0x11,0xff,0x00,
  0x0c,0x48,0xf0,0x00,0x70,0x50,0x01,0x7f,0x00,0x1b,0x94,0xff,0x4a,0xfe,0x60,0xff,
  0xff,0x7f,0x7f,0xc7,0xff,0x18,0xc7,0xff,0x60,0x7f,0x7f,0x3f,0x1f,0x0a,0x06,0x02,
  0x00,0x3c,0x60,0x01,0x07,0x87,0xef,0x00,0x07,0xb3,0xff,0x58,0x7f,0x7f,0xff,0x00,
  0x0d,0x5b,0xff,0xfc,0x80,0x48,0x01,0x00,0x0a,0x48,0x01,0x00,0x43,0x40,0x0d,0x00,
  0x00,0xe0,0xf8,0xfe,0xff,0x7f,0x1f,0x0f,0x07,0x03,0x01,0x00,0x0f,0x08,0xc2,0xff,
  0x00,0x07,0x62,0x07,0x3f,0x7f,0xff,0x52,0x9f,0x07,0x40,0x0b,0x0f,0x1f,0x1f,0x3f,
  0x3f,0x7f,0x7f,0xff,0xfc,0xf0,0xe0,0xe0,0x00,0x4d,0x7b,0xc0,0xe0,0xf8,0xff,0x7f,
  0x1f,0x07,0xc4,0x00,0xc1,0x80,0xc2,0xff,0x4d,0x0e,0x6c,0xc0,0xe0,0xf0,0xf8,0x7e,
  0x4e,0x00,0xc3,0x00,0x48,0x83,0xc2,0xff,0x00,0x4c,0xa7,0x01,0xa1,0x00,0x60,0x01,
  0x03,0x03,0x01,0x00,0x16,0x99,0x00,0x60,0x03,0x03,0x03,0x01,0x00,0x2a
};

//! 乱数発生
uint8_t randi (uint8_t max) {
  return (max == 0u) ? 0u : rand()%(max+1);
}

//! main関数
int main (void){
  char szTemp[32];

  uint8_t xx, yy;
  dx.puts("\n\r    0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
  for (yy=0;yy<8;yy++) {
    xx = 0;
    dx.printf("%02X:",yy*16+xx);
    for (xx=0;xx<16;xx++) {
      dx.printf(" %c", Wire.ping(yy*16+xx) ? 'X' : '-');
    }
    dx.puts("\n\r");
  }


  if (ssoled.rc != COLED::OLED_NOT_FOUND) {
    oled.Fill(&ssoled, 0, 1);
    oled.WriteString(&ssoled, 0, 0, 0, "OLED found", COLED::FONT_NORMAL, 0, 1);

    UD5_WAIT(1000);

    while(1){
      oled.SetContrast(&ssoled, 255);
      for (int iRot = COLED::ROT_0; iRot <= COLED::ROT_270; iRot++) {
        oled.Fill(&ssoled, 0, 1);
        for (int i = 0; i<40; i++) {
          int x, y;
          x = randi(128);
          y = randi(64);
          oled.ScaledString(&ssoled, x, y, (char *)"Rotated Text", COLED::FONT_8x8, 0, 256, 256, iRot);
          oled.DumpBuffer(&ssoled, NULL);
          if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
        }
        UD5_WAIT(1000);
      }

      for (int i=0; i<8; i++) {
        sprintf(szTemp, "Line %d", i);
        oled.WriteString(&ssoled, 0,0,i,szTemp, COLED::FONT_8x8, 0, 0);
        oled.WriteString(&ssoled, 0,64,i,szTemp, COLED::FONT_8x8, 0, 0);
      }
      int j = 0; // missing line
      for (int i=0;i<10;i++) {
        for (int k=0; k<8; k++) {// smooth scroll 8 lines
          oled.ScrollBuffer(&ssoled, 0,63,0,7,1);
          oled.ScrollBuffer(&ssoled, 64,127,0,7,0);
          oled.DumpBuffer(&ssoled, NULL);
          UD5_WAIT(20);
          if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
        }
        // fill in the missing line which scrolls off
        sprintf(szTemp, "Line %d", j & 7);
        oled.WriteString(&ssoled, 0,0,7,szTemp, COLED::FONT_NORMAL, 0, 0);
        sprintf(szTemp, "Line %d", 7-(j & 7));
        oled.WriteString(&ssoled, 0,64,0,szTemp, COLED::FONT_NORMAL, 0, 0);
        j++;
      }

      oled.Fill(&ssoled, 0, 1);
      oled.SetContrast(&ssoled, 64);
      oled.printf(&ssoled, "*******************\r\n");
      oled.printf(&ssoled, "* printf test     *\r\n");
      oled.printf(&ssoled, "*******************\r\n");
      uint32_t t = UD5_GET_ELAPSEDTIME () + 10000;
      int8_t l = 0;
      while (t > UD5_GET_ELAPSEDTIME ()) {
        oled.SetCursor (&ssoled, 0, 3);
        oled.printf(&ssoled, "lef time:%5dms\r\n", t - UD5_GET_ELAPSEDTIME ());
        oled.printf(&ssoled, "gpio: 0x%04X\r\n", gpio.get_gpio());
        exio.set_LED(l);
        oled.printf(&ssoled, "led : 0b%06b\r\n", l++&0x3f);
        oled.printf(&ssoled, "exio: 0x%04X\r\n", exio.get_gpio());
        if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
      }
      UD5_WAIT(1500);

      oled.Fill(&ssoled, 0,1);
      oled.WriteString(&ssoled, 0,0,0,(char *)"Now with 5 font sizes", COLED::FONT_6x8, 0, 1);
      oled.WriteString(&ssoled, 0,0,1,(char *)"6x8 8x8 16x16", COLED::FONT_8x8, 0, 1);
      oled.WriteString(&ssoled, 0,0,2,(char *)"16x32 and a new", COLED::FONT_8x8, 0, 1);
      oled.WriteString(&ssoled, 0,0,3,(char *)"Stretched", COLED::FONT_12x16, 0, 1);
      oled.WriteString(&ssoled, 0,0,5,(char *)"from 6x8", COLED::FONT_12x16, 0, 1);
      if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
      UD5_WAIT(3000);

     oled.Fill(&ssoled, 0, 1);
      uint8_t *pAnim = (uint8_t *)bAnimation; // point to first frame
      for (int i=0;i<100;i++) {
        pAnim = oled.PlayAnimFrame(&ssoled, (uint8_t *)bAnimation, pAnim, sizeof(bAnimation));
        UD5_WAIT(20); // simplistic rate control; should manage the variable time per frame
        if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
      }

      oled.Fill(&ssoled, 0, 1);
      oled.WriteString(&ssoled, 0, 0, 0, (char *)"Ellipse", COLED::FONT_NORMAL, 0, 1);
      UD5_WAIT(1000);
      for (int i=0;i<100;i++) {
        oled.Ellipse(&ssoled, randi(128), randi(64), randi(64), randi(32), 1, 0);
        oled.DumpBuffer(&ssoled, NULL);    

        if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
      }

      oled.Fill(&ssoled, 0, 1);
      oled.WriteString(&ssoled, 0, 0, 0, (char *)"Rectangles", COLED::FONT_NORMAL, 0, 1);
      UD5_WAIT(1000);
      for (int i=0; i<100; i++){
        oled.Rectangle(&ssoled, randi(128), randi(64), randi(128), randi(64), 1, 0);
        oled.DumpBuffer(&ssoled, NULL);

        if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
      }

      oled.Fill(&ssoled, 0, 1);
      oled.WriteString(&ssoled, 0, 0, 0, (char *)"Filled Rects", COLED::FONT_NORMAL, 0, 1);
      UD5_WAIT(1000);
      for (int i=0; i<100; i++){
        oled.Rectangle(&ssoled, randi(128), randi(64), randi(128), randi(64), randi(2), 1);
        oled.DumpBuffer(&ssoled, NULL);

        if (dx.rxbuff()) { if(dx.getc() == '!') UD5_SOFTRESET(); }
      }
    }
  }
}
